AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  sample-sam-stepfunctions

  Sample SAM Template for sample-sam-stepfunctions

Resources:
  S3Contents:
    Type: AWS::S3::Bucket

  S3ContetsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Contents
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject
              - s3:PutObject
              - s3:PutObjectAcl
            Effect: Allow
            Resource:
              'Fn::Join':
                - ''
                - - 'arn:aws:s3:::'
                  - Ref: S3Contents
                  - /*
            Principal:
              AWS:
                - !GetAtt AllowAccessToS3Role.Arn

  StockTradingStateMachine:
    Type: AWS::Serverless::StateMachine # More info about State Machine Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-statemachine.html
    Properties:
      DefinitionUri: statemachine/stock_trader.asl.json
      DefinitionSubstitutions:
        SetUserFunctionArn: !GetAtt SetUserFunction.Arn
        GetUserFromS3FunctionArn: !GetAtt GetUserFromS3Function.Arn
        SaveUserToDynamoDBFunctionArn: !GetAtt SaveUserToDynamoDBFunction.Arn
        DDBPutItem: !Sub arn:${AWS::Partition}:states:::dynamodb:putItem
        DDBTable: !Ref TransactionTable
      Events:
        HourlyTradingSchedule:
          Type: Schedule # More info about Schedule Event Source: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-statemachine-schedule.html
          Properties:
            Description: Schedule to run the stock trading state machine every hour
            Enabled: False # This schedule is disabled by default to avoid incurring charges.
            Schedule: "rate(1 hour)"
      Policies: # Find out more about SAM policy templates: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
        - LambdaInvokePolicy:
            FunctionName: !Ref SetUserFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref GetUserFromS3Function
        - LambdaInvokePolicy:
            FunctionName: !Ref SaveUserToDynamoDBFunction
        - DynamoDBWritePolicy:
            TableName: !Ref TransactionTable

  AllowAccessToS3Role: # TODO 共通処理として抜き出す
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowAccessToS3
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                 - s3:GetObject
                 - s3:PutObject
                 - s3:PutObjectAcl
                Resource: !GetAtt S3Contents.Arn

  SetUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/set_user/
      Handler: app.lambda_handler
      Runtime: python3.8
      Environment:
        Variables:
          BUCKET_NAME: !Ref S3Contents
      Role: !GetAtt AllowAccessToS3Role.Arn

  GetUserFromS3Function:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/get_user_from_s3/
      Handler: app.lambda_handler
      Runtime: python3.8
      Environment:
        Variables:
          BUCKET_NAME: !Ref S3Contents
      Role: !GetAtt AllowAccessToS3Role.Arn

  SaveUserToDynamoDBFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/save_user_to_dynamodb/
      Handler: app.lambda_handler
      Runtime: python3.8

  TransactionTable:
    Type: AWS::Serverless::SimpleTable # More info about SimpleTable Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-simpletable.html
    Properties:
      PrimaryKey:
        Name: Id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  TestErrorHandlingStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: statemachine/test_error_handling.asl.json
      DefinitionSubstitutions:
        CheckStatusFunctionArn: !GetAtt CheckStatusFunction.Arn
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref CheckStatusFunction

  CheckStatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/check_status/
      Handler: app.lambda_handler
      Runtime: python3.8

Outputs:
  # StockTradingStateMachineHourlyTradingSchedule is an implicit Schedule event rule created out of Events key under Serverless::StateMachine
  # Find out more about other implicit resources you can reference within SAM
  # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-specification-generated-resources.html
  StockTradingStateMachineArn:
    Description: "Stock Trading State machine ARN"
    Value: !Ref StockTradingStateMachine
  StockTradingStateMachineRoleArn:
    Description: "IAM Role created for Stock Trading State machine based on the specified SAM Policy Templates"
    Value: !GetAtt StockTradingStateMachineRole.Arn
